// pages/safe/[address].tsx
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import {
  Box, Heading, Text, Spinner, Stack, Tag, Link, Divider, HStack, Image,
} from '@chakra-ui/react'

type SafeInfo = {
  address: string
  nonce: number
  threshold: number
  owners: string[]
}

type TokenBalance = {
  tokenAddress: string | null
  token: {
    name: string
    symbol: string
    decimals: number
    logoUri: string
  } | null
  balance: string
  fiatBalance: string
}

export default function SafePage() {
  const { query } = useRouter()
  const safeAddress = query.address as string

  const [data, setData] = useState<SafeInfo | null>(null)
  const [balances, setBalances] = useState<TokenBalance[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!safeAddress) return

    const fetchSafe = async () => {
      setLoading(true)
      const safeRes = await fetch(`https://safe-transaction-mainnet.safe.global/api/v1/safes/${safeAddress}`)
      const safeData = await safeRes.json()

      const balanceRes = await fetch(`https://safe-transaction-mainnet.safe.global/api/v1/safes/${safeAddress}/balances/usd/`)
      const balanceData = await balanceRes.json()

      setData(safeData)
      setBalances(balanceData)
      setLoading(false)
    }

    fetchSafe()
  }, [safeAddress])

  if (loading) return <Spinner size="xl" />

  if (!data) return <Text color="red.500">No Safe data found.</Text>

  return (
    <Box p={8}>
      <Heading mb={4}>üîê Safe Dashboard</Heading>
      <Stack spacing={3}>
        <Text><b>Address:</b> <Link href={`https://etherscan.io/address/${data.address}`} isExternal>{data.address}</Link></Text>
        <Text><b>Nonce:</b> {data.nonce}</Text>
        <Text><b>Threshold:</b> {data.threshold}</Text>
        <Box>
          <Text fontWeight="bold">Owners:</Text>
          <Stack direction="row" wrap="wrap">
            {data.owners.map(owner => (
              <Tag key={owner} colorScheme="blue" mr={2}>{owner.slice(0, 6)}...{owner.slice(-4)}</Tag>
            ))}
          </Stack>
        </Box>

        <Divider my={4} />
        <Heading size="md" mt={4}>üí∞ Balances</Heading>
        <Stack spacing={2}>
          {balances.map((bal, i) => (
            <HStack key={i} spacing={3}>
              {bal.token?.logoUri && (
                <Image src={bal.token.logoUri} boxSize="20px" alt={bal.token.symbol} />
              )}
              <Text>
                <b>{bal.token?.symbol ?? 'ETH'}:</b> {(parseFloat(bal.balance) / (10 ** (bal.token?.decimals || 18))).toFixed(4)} ‚Äî ${parseFloat(bal.fiatBalance).toFixed(2)}
              </Text>
            </HStack>
          ))}
        </Stack>
      </Stack>
    </Box>
  )
}
